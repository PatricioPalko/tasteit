/* =====================================================================================================================
============================================ Gridx SYSTEM BY TOMÁŠ JORPALIDIS ===========================================
===================================================================================================================== */
@debug-mode: 1;
@gridx-columns: 24;
@gridx-gutter: 10px; // Padding between columns. Gets divided in half for the left and right.
@gridx-gutter-xl: 12px; // Padding between columns. Gets divided in half for the left and right.

@gridx-s-min: 500px;
@gridx-m-min: 768px;
@gridx-l-min: 992px;
@gridx-xl-min: 1200px;
@gridx-xxl-min: 1400px;

@gridx-xs-max: (@gridx-s-min - 1);
@gridx-s-max: (@gridx-m-min - 1);
@gridx-m-max: (@gridx-l-min - 1);
@gridx-l-max: (@gridx-xl-min - 1);
@gridx-xl-max: (@gridx-xxl-min - 1);

@gridx-container-m: (720px + @gridx-gutter);
@gridx-container-l: (950px + @gridx-gutter);

//1280-1440
@gridx-container-1280: (1024px + @gridx-gutter-xl);

//1440-1680
@gridx-container-1440: (1080px + @gridx-gutter-xl);

//1680-1920
@gridx-container-1680: (1140px + @gridx-gutter-xl);

//1920-XXX
@gridx-container-1920: (1280px + @gridx-gutter-xl);

@media-xs-max: ~"(max-width: @{gridx-xs-max})";
@media-s-min: ~"(min-width: @{gridx-s-min})";
@media-s-max: ~"(max-width: @{gridx-s-max})";
@media-s: ~"@{media-s-min} AND @{media-s-max}";
@media-m-min: ~"(min-width: @{gridx-m-min})";
@media-m-max: ~"(max-width: @{gridx-m-max})";
@media-m: ~"@{media-m-min} AND @{media-m-max}";
@media-l-min: ~"(min-width: @{gridx-l-min})";
@media-l-max: ~"(max-width: @{gridx-l-max})";
@media-l: ~"@{media-l-min} AND @{media-l-max}";
@media-xl-min: ~"(min-width: @{gridx-xl-min})";
@media-xl-max: ~"(max-width: @{gridx-xl-max})";
@media-xl: ~"@{media-xl-min} AND @{media-xl-max}";
@media-xxl-min: ~"(min-width: @{gridx-xxl-min})";


/* =====================================================================================================================
===================================================== gridx SETTINGS ====================================================
===================================================================================================================== */
.container {
  .containerx-fixed();
  width: 100%;

  @media (min-width: @gridx-m-min) {
    width: @gridx-container-m;
  }
  @media (min-width: @gridx-l-min) {
    width: @gridx-container-l;
  }
  //width: @gridx-container-l;
  @media (min-width: 1280px) {
    width: @gridx-container-1280;
    &.container-medium { width: 1200px; }
  }
  @media (min-width: 1440px) {
    width: @gridx-container-1440;
    &.container-medium { width: 1360px; }
  }
  @media (min-width: 1680px) {
    &.container-medium { width: 1450px; }
  }
  @media (min-width: 1920px) {
    &.container-medium { width: 1660px; }
  }

}

.container-fluid {
  .containerx-fixed();
}

.row {
  .make-rowx();
}

.make-gridx-columns();

.make-gridx(xs);
@media (min-width: @gridx-s-min) {
  .make-gridx(s);
}
@media (min-width: @gridx-m-min) {
  .make-gridx(m);
}
@media (min-width: @gridx-l-min) {
  .make-gridx(l);
}
@media (min-width: @gridx-xl-min) {
  .make-gridx(xl);
}
@media (min-width: @gridx-xxl-min) {
  .make-gridx(xxl);
}

/* =====================================================================================================================
================================================== MIXINS & FUNCTIONS ==================================================
===================================================================================================================== */
.containerx-fixed(@gutter: @gridx-gutter) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  floor((@gutter / 2));
  padding-right: ceil((@gutter / 2));
  @media (min-width: 1680px) {
    padding-left:  ceil((@gridx-gutter-xl / 2));
    padding-right: floor((@gridx-gutter-xl / 2));
  }
  &:extend(.clearfix all);
}

.make-gridx-columns() {
  // Common styles for all sizes of gridx columns, widths 1-12
  .col(@index) { // initial
    @item: ~".grid-xs-@{index}, .grid-s-@{index}, .grid-m-@{index}, .grid-l-@{index}, .grid-xl-@{index}, .grid-xxl-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @gridx-columns) { // general; "=<" isn't a typo
    @item: ~".grid-xs-@{index}, .grid-s-@{index}, .grid-m-@{index}, .grid-l-@{index}, .grid-xl-@{index}, .grid-xxl-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @gridx-columns) { // terminal
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left:  ceil((@gridx-gutter / 2));
      padding-right: floor((@gridx-gutter / 2));

      @media (min-width: 1680px) {
        padding-left:  ceil((@gridx-gutter-xl / 2));
        padding-right: floor((@gridx-gutter-xl / 2));
      }
    }
  }
  .col(1); // kickstart it
}

.float-gridx-columns(@class) {
  .col(@index) { // initial
    @item: ~".grid-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @gridx-columns) { // general
    @item: ~".grid-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @gridx-columns) { // terminal
    @{list} {
      float: left;
    }
  }
  .col(1); // kickstart it
}

.calc-gridx-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .grid-@{class}-@{index} {
    width: percentage((@index / @gridx-columns));
  }
}
.calc-gridx-column(@index, @class, @type) when (@type = push) and (@index > 0) {
  .grid-@{class}-push-@{index} {
    left: percentage((@index / @gridx-columns));
  }
}
.calc-gridx-column(@index, @class, @type) when (@type = push) and (@index = 0) {
  .grid-@{class}-push-0 {
    left: auto;
  }
}
.calc-gridx-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
  .grid-@{class}-pull-@{index} {
    right: percentage((@index / @gridx-columns));
  }
}
.calc-gridx-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
  .grid-@{class}-pull-0 {
    right: auto;
  }
}
.calc-gridx-column(@index, @class, @type) when (@type = offset) {
  .grid-@{class}-offset-@{index} {
    margin-left: percentage((@index / @gridx-columns));
  }
}

// Basic looping in LESS
.loop-gridx-columns(@index, @class, @type) when (@index >= 0) {
  .calc-gridx-column(@index, @class, @type);
  // next iteration
  .loop-gridx-columns((@index - 1), @class, @type);
}

// Create gridx for specific class
.make-gridx(@class) {
  .float-gridx-columns(@class);
  .loop-gridx-columns(@gridx-columns, @class, width);
  .loop-gridx-columns(@gridx-columns, @class, pull);
  .loop-gridx-columns(@gridx-columns, @class, push);
  .loop-gridx-columns(@gridx-columns, @class, offset);
}

.make-rowx(@gutter: @gridx-gutter) {
  margin-left:  ceil((@gutter / -2));
  margin-right: floor((@gutter / -2));
  &:extend(.clearfix all);

  @media (min-width: 1680px) {
    margin-left:  ceil((@gridx-gutter-xl / -2));
    margin-right: floor((@gridx-gutter-xl / -2));
  }
}

@media (min-width: 1680px) {
  .make-rowx(@gutter: @gridx-gutter-xl) {
    margin-left:  ceil((@gutter / -2));
    margin-right: floor((@gutter / -2));
    &:extend(.clearfix all);
  }
}
.tpl.tpl--gray .row.row-flex { flex-direction: column-reverse;
  @media @media-l-min { flex-direction: row; }
}
.row-flex { display: flex; align-items: center; flex-wrap: wrap; text-align: center; }


/* =====================================================================================================================
====================================================== DEBUG MODE ======================================================
===================================================================================================================== */
#tracy-debug:after when (@debug-mode = 1) {
  -webkit-user-drag:element;content:"XS";position:fixed;top:0;left:0;z-index:9999999;background:#cc0000;padding:5px 15px;text-align:center;font-weight:bold;color:#fff;pointer-events:none;
  @media @media-s-min {content:"S"}
  @media @media-m-min {content:"M"}
  @media @media-l-min {content:"L"}
  @media @media-xl-min {content:"XL"}
  @media @media-xxl-min {content:"XXL"}
  &:hover {opacity:.1}
}